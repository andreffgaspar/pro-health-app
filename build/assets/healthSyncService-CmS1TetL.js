var S=Object.defineProperty;var f=(c,t,e)=>t in c?S(c,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):c[t]=e;var l=(c,t,e)=>f(c,typeof t!="symbol"?t+"":t,e);import{m as h,s as p}from"./index-BQk15iUP.js";const s=class s{constructor(){l(this,"syncInterval",null);l(this,"isRunning",!1)}static getInstance(){return s.instance||(s.instance=new s),s.instance}async startBackgroundSync(t){if(this.isRunning&&this.stopBackgroundSync(),!t.enableBackgroundSync)return;console.log("Starting background health sync with config:",t),await h.initialize()||console.warn("Health service not available, sync will use mock data"),this.isRunning=!0,await this.performSync(t),this.syncInterval=setInterval(async()=>{await this.performSync(t)},t.syncInterval*60*1e3)}stopBackgroundSync(){this.syncInterval&&(clearInterval(this.syncInterval),this.syncInterval=null),this.isRunning=!1,console.log("Background health sync stopped")}async performSync(t){try{console.log("Performing health data sync...");const{data:{user:e}}=await p.auth.getUser();if(!e){console.error("No authenticated user found");return}const g=new Date;if(t.lastSyncTime){const a=g.getTime()-t.lastSyncTime.getTime(),n=5*60*1e3;if(a<n){console.log("Skipping sync - too soon since last sync");return}}const u=new Date;u.setHours(23,59,59,999);const y=new Date(u.getTime()-24*60*60*1e3);y.setHours(0,0,0,0);const r=[];for(const a of t.enabledDataTypes)try{if(!["steps","active-calories"].includes(a))continue;const m=(await h.queryAggregatedData(a,y,u,"day")).map(i=>({type:i.type,value:i.value,unit:i.unit,timestamp:i.startDate,source:i.sourceName||"background_sync"}));r.push(...m)}catch(n){console.error(`Failed to sync ${a}:`,n)}if(r.length===0){const a=this.generateMockHealthUpdate();r.push(...a)}if(r.length>0){const a=r.map(o=>({athlete_id:e.id,data_type:o.type,data:{value:o.value,unit:o.unit,source:o.source||"background_sync",auto_synced:!0},recorded_at:o.timestamp.toISOString()})),{error:n}=await p.from("athlete_data").upsert(a,{onConflict:"athlete_id,data_type,recorded_at",ignoreDuplicates:!0});n?console.error("Failed to save background sync data:",n):(console.log(`Background sync completed: ${r.length} data points`),await this.updateLastSyncTime())}}catch(e){console.error("Background sync failed:",e)}}generateMockHealthUpdate(){const t=new Date,e=[];return e.push({type:"heart_rate",value:65+Math.random()*25,unit:"bpm",timestamp:t}),t.getMinutes()===0&&e.push({type:"steps",value:Math.floor(Math.random()*1e3)+500,unit:"count",timestamp:t}),e}async updateLastSyncTime(){try{localStorage.setItem("lastHealthSync",new Date().toISOString())}catch(t){console.error("Failed to update last sync time:",t)}}getLastSyncTime(){try{const t=localStorage.getItem("lastHealthSync");return t?new Date(t):null}catch(t){return console.error("Failed to get last sync time:",t),null}}isBackgroundSyncRunning(){return this.isRunning}};l(s,"instance");let d=s;const k=d.getInstance();export{d as HealthSyncService,k as healthSyncService};
