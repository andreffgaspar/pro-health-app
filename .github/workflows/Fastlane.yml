name: Fastlane

on:
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest

    env:
      FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
      FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APP_STORE_EMAIL: ${{ secrets.APP_STORE_EMAIL }}
      APP_IDENTIFIER: com.prosoccerapp.prohealthapp

    steps:
      - uses: actions/checkout@v3

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2

      - run: gem install fastlane

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm install --legacy-peer-deps

      - run: npm run build

      - run: rm -rf ios

      - run: |
          npx cap add ios
          npx cap sync

      - run: |
          cd ios/App
          pod install

      - run: |
          mkdir -p ios/App/fastlane
          cat <<EOF > ios/App/fastlane/Fastfile
          default_platform(:ios)
      
          platform :ios do
            desc "Build and upload to TestFlight using Apple ID login"
            lane :release do
              build_app(
                scheme: "App",
                export_method: "app-store",
                export_team_id: ENV["APPLE_TEAM_ID"],
                xcargs: "DEVELOPMENT_TEAM=#{ENV['APPLE_TEAM_ID']}" -allowProvisioningUpdates",
                clean: true,
                silent: false,
                export_options: {
                  provisioningProfiles: {
                    ENV["APP_IDENTIFIER"] => "match AppStore #{ENV["APP_IDENTIFIER"]}"
                  }
                }
              )
            
              upload_to_testflight(
                username: ENV["APP_STORE_EMAIL"],
                app_identifier: ENV["APP_IDENTIFIER"]
              )
            end
          end
          EOF

      - run: |
          cd ios/App
          fastlane release

      - uses: actions/upload-artifact@v4
        with:
          name: app-ios
          path: ios/App/*.ipa

      - name: Show build log if failure
        if: failure()
        run: |
          cat ~/Library/Logs/gym/App-App.log || echo "Log n√£o encontrado"
