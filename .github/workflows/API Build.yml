name: Build e Upload iOS com Fastlane

on:
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest

    env:
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
      APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
      APPLE_KEY_CONTENT: ${{ secrets.APPLE_KEY_CONTENT }}
      APP_IDENTIFIER: com.prosoccerapp.prohealthapp
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APP_STORE_EMAIL: ${{ secrets.APP_STORE_EMAIL}}
      IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2

      - name: Install Fastlane
        run: gem install fastlane

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Instalar dependÃªncias
        run: npm install --legacy-peer-deps

      - name: Build do Vite
        run: npm run build

      - name: Remover pasta iOS
        run: rm -rf ios

      - name: Adicionar iOS e sincronizar Capacitor
        run: |
          npx cap add ios
          npx cap sync

      - name: Instalar CocoaPods
        run: |
          cd ios/App
          pod install

      - name: Criar chave privada para App Store Connect
        run: echo "${APPLE_KEY_CONTENT}" > AuthKey.p8

      - name: Gerar arquivo do certificado a partir do base64
        run: echo "$IOS_CERTIFICATE" | base64 --decode > certificate.p12
        env:
          IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
    
      - name: Decodificar certificado e perfil de provisionamento
        run: |
          echo "$IOS_CERTIFICATE_BASE64" | base64 -d -o certificate.p12
          echo "$IOS_PROVISIONING_PROFILE_BASE64" | base64 -d -o profile.mobileprovision
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}

      - name: Configurar keychain e importar certificado
        run: |
          security create-keychain -p "temppass" ios-build.keychain
          security default-keychain -s ios-build.keychain
          security unlock-keychain -p "temppass" ios-build.keychain
          security import certificate.p12 -k ios-build.keychain -P "$IOS_CERT_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "temppass" ios-build.keychain

      - name: Copiar provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(grep -a -o "[-A-F0-9]\{36\}" profile.mobileprovision | head -1)
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          
      - name: Criar estrutura do Fastlane e Fastfile com API Key
        run: |
          mkdir -p ios/App/fastlane
      
          cat <<EOF > ios/App/fastlane/Fastfile
          default_platform(:ios)

          platform :ios do
            desc "Build and upload to TestFlight"
            lane :release do
              build_app(
                scheme: "App",
                export_method: "app-store",
                export_options: {
                  provisioningProfiles: {
                    ENV['APP_IDENTIFIER'] => ENV['PROVISIONING_PROFILE_NAME']
                  }
                }
              )
              upload_to_testflight(
                api_key: app_store_connect_api_key(
                  key_id: ENV["APPLE_KEY_ID"],
                  issuer_id: ENV["APPLE_ISSUER_ID"],
                  key: ENV["APPLE_KEY_CONTENT"]
                )
              )
            end
          end
          EOF
       
      - name: Fastlane release
        run: |
          cd ios/App
          fastlane release
    
      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: app-ios
          path: ios/App/*.ipa
