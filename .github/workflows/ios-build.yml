name: Build iOS App

on:
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest
    env:
      IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
      IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
      IOS_PROFILE: ${{ secrets.IOS_PROFILE }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      PROVISIONING_PROFILE_NAME: ${{ secrets.PROVISIONING_PROFILE_NAME }}

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Instalar dependências
        run: npm install --legacy-peer-deps

      - name: Build Vite
        run: npm run build

      - name: Instalar Capacitor
        run: npm install -g @capacitor/cli

      - name: Limpar pasta iOS (caso exista)
        run: rm -rf ios

      - name: Adicionar iOS
        run: npx cap add ios

      - name: Sincronizar Capacitor
        run: npx cap sync

      - name: Instalar dependências nativas iOS (CocoaPods)
        run: |
          cd ios/App
          pod install
          
      - name: Preparar certificado e configurar keychain
        run: |
          echo "$IOS_CERTIFICATE" | base64 --decode > certificate.p12
          echo "$IOS_PROFILE" | base64 --decode > profile.mobileprovision
      
          security create-keychain -p "$IOS_CERT_PASSWORD" ios-build.keychain
          security list-keychains -s ios-build.keychain
          security default-keychain -s ios-build.keychain
          security unlock-keychain -p "$IOS_CERT_PASSWORD" ios-build.keychain
      
          security import certificate.p12 -k ios-build.keychain -P "$IOS_CERT_PASSWORD" -T /usr/bin/codesign
      
          # Permitir acesso sem interação
          security set-key-partition-list -S apple-tool:,apple: -s -k "$IOS_CERT_PASSWORD" ios-build.keychain
      
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(/usr/bin/security cms -D -i profile.mobileprovision))
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision

      - name: Criar exportOptions.plist
        run: |
          cat <<EOF > ios/App/exportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>teamID</key>
            <string>${APPLE_TEAM_ID}</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>com.prosoccerapp.prohealthapp</key>
              <string>${{ secrets.PROVISIONING_PROFILE_NAME }}</string>
            </dict>
          </dict>
          </plist>
          EOF

      - name: Verificar Schemes disponíveis
        run: |
          cd ios/App
          xcodebuild -list

      - name: Verificar configuração de assinatura
        run: |
          cd ios/App
          xcodebuild -showBuildSettings -scheme App | grep -E "DEVELOPMENT_TEAM|CODE_SIGN|PROVISIONING"

      - name: Corrigir assinatura dos Pods para automático
        run: |
          find ios/App/Pods -name "project.pbxproj" | while read proj; do
            echo "Corrigindo $proj"
            sed -i '' '/PROVISIONING_PROFILE_SPECIFIER/d' "$proj"
            sed -i '' '/PROVISIONING_PROFILE =/d' "$proj"
            sed -i '' '/CODE_SIGN_IDENTITY =/d' "$proj"
            sed -i '' '/CODE_SIGN_STYLE =/d' "$proj"
            sed -i '' '/buildSettings = {/,/}/ s/^[[:space:]]*$/        CODE_SIGN_STYLE = Automatic;/' "$proj"
          done

      - name: Verificar build settings de um Pod
        run: |
          cd ios/App
          xcodebuild -target Capacitor -showBuildSettings | grep CODE_SIGN
    
      - name: Build com Xcode
        run: |
          cd ios/App
          xcodebuild -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -sdk iphoneos \
            -archivePath $PWD/build/App.xcarchive \
            -allowProvisioningUpdates \
            -allowProvisioningDeviceRegistration \
            -destination 'generic/platform=iOS' \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_NAME" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            archive

      - name: Verificar Info.plist dos frameworks
        run: |
          echo "CapacitorPushNotifications.framework"
          plutil -p ios/App/build/App.xcarchive/Products/Applications/App.app/Frameworks/CapacitorPushNotifications.framework/Info.plist
      
          echo "Capacitor.framework"
          plutil -p ios/App/build/App.xcarchive/Products/Applications/App.app/Frameworks/Capacitor.framework/Info.plist
      
          echo "CordovaPlugins.framework"
          plutil -p ios/App/build/App.xcarchive/Products/Applications/App.app/Frameworks/CordovaPlugins.framework/Info.plist
      
          echo "Cordova.framework"
          plutil -p ios/App/build/App.xcarchive/Products/Applications/App.app/Frameworks/Cordova.framework/Info.plist
      
          echo "CapacitorLocalNotifications.framework"
          plutil -p ios/App/build/App.xcarchive/Products/Applications/App.app/Frameworks/CapacitorLocalNotifications.framework/Info.plist

      - name: Verificar Info.plist do App principal
        run: |
          echo "App.app Info.plist"
          plutil -p ios/App/build/App.xcarchive/Products/Applications/App.app/Info.plist

      - name: Listar Profiles instalados
        run: |
          ls -lh ~/Library/MobileDevice/Provisioning\ Profiles
          for f in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            echo "== $f =="
            security cms -D -i "$f" | plutil -p - | grep -E 'Name|UUID|TeamIdentifier|Entitlements|application-identifier'
          done

      - name: Verificar certificados
        run: |
          security find-identity -v -p codesigning
          security list-keychains
          
      - name: Exportar IPA
        run: |
          set -x
          echo "::group::exportOptions.plist"
          cat ios/App/exportOptions.plist
          echo "::endgroup::"
      
          echo "::group::Conteúdo do .xcarchive"
          find ios/App/build/App.xcarchive
          echo "::endgroup::"
      
          xcodebuild -exportArchive -verbose \
            -archivePath ios/App/build/App.xcarchive \
            -exportOptionsPlist ios/App/exportOptions.plist \
            -exportPath ios/App/build | tee ios/App/build/export-log.txt
        timeout-minutes: 5
        continue-on-error: true

      - name: Dump logs de distribuição
        if: always()
        run: |
          LOG_PATH=$(find /var/folders -name "*.xcdistributionlogs" | head -n 1)
          if [[ -f "$LOG_PATH" ]]; then
            echo "::group::Log de distribuição"
            cat "$LOG_PATH"
            echo "::endgroup::"
          else
            echo "Nenhum log encontrado."
          fi
          
      - name: Upload do .ipa
        uses: actions/upload-artifact@v4
        with:
          name: app-ios
          path: ios/App/build/*.ipa

      - name: Enviar para TestFlight
        run: |
          xcrun altool --upload-app --type ios --file ios/App/build/App.ipa \
            --username "$APPLE_ID" --password "$APP_SPECIFIC_PASSWORD"
